#! /bin/csh -f
set arch = `uname -s`
echo "This seems to be a " $arch " architecture"
set ofile = config.mk.${arch}

#
# Get some useful stuff from conf/Makefile.whatever
#
echo "Checking for conf/Makefile.${arch}"
if ( ! -e conf/Makefile.${arch} ) then
  echo "I can't find conf/Makefile.${arch} !"
  echo "You will have to create an appropriate version."
  exit -1
endif
echo "Found it; scanning it for XLIBS, GLLIBS and CFLAGS"
set xlibs = `grep XLIBS conf/Makefile.${arch}`
shift xlibs
shift xlibs
set gllibs = `grep GLLIBS conf/Makefile.${arch}`
shift gllibs
shift gllibs
set cflags = `grep CFLAGS conf/Makefile.${arch}`
shift cflags
shift cflags

# Generate config.mk.${arch}
echo "# This file generated by configure on " `date` > $ofile
echo " " >> $ofile

#
# Check for PVM
#
echo "Checking for PVM..."
set incl_pvm = 1
if ( ( ! ${?PVM_ROOT} ) || ( ! ${?PVM_ARCH} ) ) then
  echo "The environment variables PVM_ROOT and PVM_ARCH are not set."
  set incl_pvm = 0
endif

if ( $incl_pvm ) then
    if ( ( ! -e ${PVM_ROOT}/lib/${PVM_ARCH}/libpvm3.a ) \
	|| ( ! -e ${PVM_ROOT}/include/pvm3.h ) ) then
    echo "The PVM library and include files could not be found."
    set incl_pvm = 0
    endif
endif

if ( $incl_pvm ) then
echo "Found all the parts; PVM parallelism will be included."

cat >> $ofile << %%EOF%%
# The following lines cause PVM parallelism to be included
CFLAGS += -DINCL_PVM -I${PVM_ROOT}/include
LIBS += -L${PVM_ROOT}/lib/${PVM_ARCH} -lgpvm3 -lpvm3

%%EOF%%

else

  echo "PVM parallelism will *not* be included."

cat >> $ofile << %%EOF%%
# The following lines cause PVM parallelism to be excluded
CFLAGS += -DLOCAL_VREN
M4FLAGS += -DLOCAL_VREN

%%EOF%%

endif

#
# Check for UIL compiler
#
echo "Checking for uil compiler..."
set uil_found = 0
set uil_compiler = ""
(which uil >& /dev/null)
if ( ! $status ) then
  echo "UIL compiler is in the current path."
  set uil_compiler = "uil"
  set uil_found = 1
else
  foreach dirname ( /bin /usr/bin /usr/local/bin/ /usr/X11R6/bin \
      /usr/X11/bin /usr/statlocal/bin ${HOME}/bin )
    if ( -x ${dirname}/uil ) then
      set uil_compiler = ${dirname}/uil
      set uil_found = 1
      echo "Found the UIL compiler $uil_compiler"
      break
    endif
  end  
endif

#
# Check for X
#
echo "Checking for X..."
set incl_x = 1
cat > tmp_config_X_test.c << %%EOF%%
#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Intrinsic.h>
#include <X11/Xutil.h>
#include <X11/Xatom.h>
#include <X11/Xmu/StdCmap.h>
#include <Xm/Xm.h>
#include <Xm/MainW.h>
int main() {
  int zero= 0;
  Widget w= XtInitialize("junk","junk",NULL,0,&zero,NULL);
}
%%EOF%%

( cc -o tmp_config_X_test $cflags tmp_config_X_test.c $xlibs >& /dev/null )
if ( ! $status ) then
  echo "X libraries and includes are where I expected."
else
  echo "X libraries or includes are not where I expected."
  set incl_x = 0
endif

if ( $incl_x && $uil_found ) then
echo "Executables dependent on X will be built."

cat >> $ofile << %%EOF%%
# The following lines cause executables dependent on X to be built."
UILCC = $uil_compiler
CFLAGS += -DINCL_X
M4FLAGS += -DINCL_X
LIBS += \${XLIBS}

%%EOF%%
endif

else

  echo "Executables dependent on X will *not* be built"

endif
rm tmp_config_X_test*

#
# Check for OpenGL
#
echo "Checking for OpenGL..."
set incl_gl = 1
cat > tmp_config_gl_test.c << %%EOF%%
#include <X11/Intrinsic.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glx.h>
int main() {
  static int attrs[]= { None };
  Display* dpy= XOpenDisplay(0);
  XVisualInfo *vi= glXChooseVisual(dpy, DefaultScreen(dpy), attrs);
  GLXContext cx= glXCreateContext(dpy, vi, 0, GL_TRUE);
  GLUquadricObj* q= gluNewQuadric();
}
%%EOF%%

( cc -o tmp_config_gl_test $cflags tmp_config_gl_test.c \
    $gllibs $xlibs -lm )
if ( ! $status ) then
  echo "GL libraries and includes are where I expected."
else
  echo "GL libraries or includes are not where I expected."
  set incl_gl = 0
endif

if ( $incl_gl ) then
echo "GL support will be included."

cat >> $ofile << %%EOF%%
# The following lines cause the GL renderer to be included
CFLAGS += -DINCL_GL -DUSE_OPENGL
M4FLAGS += -DINCL_GL -DUSE_OPENGL
LIBS += \${GLLIBS} \${XLIBS}

%%EOF%%

else

  echo "GL support will *not* be included."

endif
rm tmp_config_gl_test*

#
# Check for Chromium
#
if (! $incl_gl) goto skip_chromium
echo "Since GL is included, checking for Chromium"
set incl_cr = 0
foreach dirname ( /include /usr/include /usr/local/include \
    /usr/local/cr /usr/statlocal/include /usr/statlocal/cr \
    /usr/freeware/include /usr/freeware/cr ${HOME}/cr/include \
    ${HOME}/cr/cr/include ${HOME}/include )
  if ( -e ${dirname}/chromium.h ) then
    set incl_cr = 1
    break
  endif
end  

if ( $incl_cr ) then
  echo "Found ${dirname}/chromium.h; setting up for Chromium"
  if ( ${dirname} == /usr/include || ${dirname} == /include ) then
    set incstr = "-DCHROMIUM"
  else
    set incstr = "-I${dirname} -DCHROMIUM"
  endif
  cat >> $ofile << %%EOF%%
# The following lines cause the inclusion of Chromium support
# for parallel rendering.
CFLAGS += ${incstr}
M4FLAGS += -DCHROMIUM

%%EOF%%
else
  echo "chromium.h was not found, so Chromium support will be omitted."
endif

skip_chromium:

#
# Check for Posix threads
#
echo "Checking for Posix threads..."
set incl_pthreads = 1
cat > tmp_config_pthread_test.c << %%EOF%%
#include <pthread.h>
void* start(void* foo) {
  int i;
  for (i=0; i<100000; i++) {}
  return NULL;
}
int main() {
  pthread_t pth;
  int thread= pthread_create( &pth, NULL, start, NULL );
  pthread_join( pth, NULL );
}
%%EOF%%

( cc -o tmp_config_pthread_test $cflags tmp_config_pthread_test.c -lpthread -lm )
if ( ! $status ) then
  echo "Pthreads libraries and includes are available."
else
  echo "Pthreads libraries and includes are *not* available."
  set incl_pthreads = 0
endif

if ( $incl_pthreads ) then
echo "Pthreads support will be included."

cat >> $ofile << %%EOF%%
# The following lines cause Pthreads support to be included
CFLAGS += -DINCL_POSIX
CFLAGS += -DINCL_POSIX
LIBS += -lpthread

%%EOF%%

else

  echo "Pthreads support will *not* be included."

endif
rm tmp_config_pthread_test*

#
# Check for HDF
#
echo "Checking for HDF..."
set incl_hdf_inc = 0
foreach dirname ( /include /usr/include /usr/local/include \
    /usr/statlocal/include /usr/freeware/include ${HOME}/include )
  if ( -e ${dirname}/hdf.h && -e ${dirname}/mfhdf.h && \
       -e ${dirname}/netcdf.h ) then
    set incl_hdf_inc = 1
    set incl_hdf_incdir = $dirname
    break
  endif
end
if ( $incl_hdf_inc ) then
  echo "Found the HDF includes in $incl_hdf_incdir"
  if ( ${incl_hdf_incdir} == /usr/include \
      || ${incl_hdf_incdir} == /include ) then
    set incstr = "-DINCL_HDF"
  else
    set incstr = "-DINCL_HDF -I$incl_hdf_incdir"
  endif
else
  echo "Failed to find HDF include files."
endif

set incl_hdf_lib = 0
foreach dirname ( /lib /usr/lib /usr/local/lib /usr/statlocal/lib \
    /usr/freeware/lib ${HOME}/lib )
  if ( ( -e ${dirname}/libmfhdf.a || -e ${dirname}/libmfhdf.so ) \
       && ( -e ${dirname}/libdf.a || -e ${dirname}/libdf.so ) ) then
    set incl_hdf_lib = 1
    set incl_hdf_libdir = $dirname
    break
  endif
end  
if ( $incl_hdf_lib ) then
  echo "Found the HDF libs in $incl_hdf_libdir"
  if ( ${incl_hdf_libdir} == /usr/lib \
      || ${incl_hdf_libdir} == /lib ) then
    set libstr = "-lmfhdf -ldf -lz -ljpeg"
  else
    set libstr = "-L${incl_hdf_libdir} -lmfhdf -ldf -lz -ljpeg"
  endif
else
  echo "Failed to find HDF lib files."
endif

if ( $incl_hdf_inc && $incl_hdf_lib ) then
  echo "Checking HDF linkability..."

  cat > tmp_config_hdf_test.c << %%EOF%%
#include <hdf.h>
#include <netcdf.h>
#include <mfhdf.h>
int main() {
  int id;
  id= (int)SDstart( "foo", DFACC_RDONLY );
  if (SDendaccess(id) == FAIL) return 0;
  if (SDend(id)==FAIL) return 0;
}
%%EOF%%

  ( cc -o tmp_config_hdf_test $cflags ${incstr} tmp_config_hdf_test.c ${libstr} -lm >& /dev/null )
  if ( ! $status ) then
    echo "HDF libraries and includes are available."
    set incl_hdf = 1
  else
    echo "HDF linking test failed!"
    set incl_hdf = 0
endif

else
  echo "Failed to find HDF includes or libs; HDF will not be supported."
  set incl_hdf = 0  
endif

if ( $incl_hdf ) then
echo "HDF support will be included."

cat >> $ofile << %%EOF%%
# The following lines cause HDF support to be included
CFLAGS += ${incstr}
M4FLAGS += -DINCL_HDF
LIBS += ${libstr}
BUILD_EXES += \$B/bytestohdf \$B/floatstohdf

%%EOF%%

else

  echo "HDF support will *not* be included."

endif
rm tmp_config_hdf_test*


#
# Check for Pittsburgh MRI 
#
echo "Checking for Pittsburgh MRI via FIASCO environment variable..."
set incl_fiasco_inc = 0
set incl_fiasco_lib = 0
if ( ${?FIASCO} ) then
  set fiasco_arch = ${FIASCO:t}
  set fiasco_root = ${FIASCO}/../..
  set incl_fiasco_incdir = ${fiasco_root}/include/${fiasco_arch}
  set incl_fiasco_libdir = ${fiasco_root}/lib/${fiasco_arch}
  if ( -e ${incl_fiasco_incdir}/mri.h ) then
    set incl_fiasco_inc = 1
  endif
  if ( -e ${incl_fiasco_libdir}/libmri.a \
      && -e ${incl_fiasco_libdir}/libbio.a ) then
    set incl_fiasco_lib = 1
  endif
endif

if ( $incl_fiasco_inc ) then
  echo "Found the Pittsburgh MRI includes in $incl_fiasco_incdir"
  if ( ${incl_fiasco_incdir} == /usr/include \
      || ${incl_fiasco_incdir} == /include ) then
    set incstr = "-DINCL_FIASCO "
  else
    set incstr = "-DINCL_FIASCO  -I$incl_fiasco_incdir"
  endif
else
  echo "Failed to find Pittsburgh MRI include files."
endif

if ( $incl_fiasco_lib ) then
  echo "Found the Pittsburgh MRI libs in $incl_fiasco_libdir"
  if ( ${incl_fiasco_libdir} == /usr/lib \
      || ${incl_fiasco_libdir} == /lib ) then
    set libstr = "-lmri -lbio"
  else
    set libstr = "-L${incl_fiasco_libdir} -lmri -lbio"
  endif
else
  echo "Failed to find Pittsburgh MRI lib files."
endif

if ( $incl_fiasco_inc && $incl_fiasco_lib ) then
  echo "Checking Pittsburgh MRI linkability..."

  cat > tmp_config_fiasco_test.c << %%EOF%%
#include <mri.h>
int main() {
  MRI_Dataset* ds= mri_open_dataset("foo",MRI_READ);
  mri_close_dataset(ds);
}
%%EOF%%

  ( cc -o tmp_config_fiasco_test $cflags ${incstr} tmp_config_fiasco_test.c ${libstr} -lm >& /dev/null )
  if ( ! $status ) then
    echo "Pittsburgh MRI libraries and includes are available."
    set incl_fiasco = 1
  else
    echo "Pittsburgh MRI  linking test failed!"
    set incl_fiasco = 0
endif

else
  set incl_fiasco = 0  
endif

if ( $incl_fiasco ) then
echo "Pittsburgh MRI support will be included."

cat >> $ofile << %%EOF%%
# The following lines cause Pittsburgh MRI  support to be included
CFLAGS += ${incstr}
M4FLAGS += -DINCL_FIASCO
LIBS += ${libstr}

%%EOF%%

else

  echo "Pittsburgh MRI support will *not* be included."

endif
rm tmp_config_fiasco_test*


#
# Check for Tcl
#
echo "Checking for Tcl..."
set incl_tcl_inc = 0
foreach dirname ( /include /usr/include /usr/local/include \
    /usr/statlocal/include /usr/freeware/include ${HOME}/include \
    /usr/include/tcl8.4 )
  if ( -e ${dirname}/tcl.h ) then
    set incl_tcl_inc = 1
    set incl_tcl_incdir = $dirname
    break
  endif
end
if ( $incl_tcl_inc ) then
  echo "Found the Tcl includes in $incl_tcl_incdir"
  if ( ${incl_tcl_incdir} == /usr/include \
      || ${incl_tcl_incdir} == /include ) then
    set incstr = "-DINCL_TCL"
  else
    set incstr = "-DINCL_TCL -I$incl_tcl_incdir"
  endif
else
  echo "Failed to find Tcl include files."
endif

set incl_tcl_lib = 0
foreach dirname ( /lib /usr/lib /usr/local/lib /usr/statlocal/lib \
    /usr/freeware/lib ${HOME}/lib )
  if ( -e ${dirname}/libtcl.a || -e ${dirname}/libtcl.so ) then
    set incl_tcl_lib = 1
    set incl_tcl_libdir = $dirname
    break
  endif
end  
if ( $incl_tcl_lib ) then
  echo "Found the Tcl libs in $incl_tcl_libdir"
  if ( ${incl_tcl_libdir} == /usr/lib \
      || ${incl_tcl_libdir} == /lib ) then
    set libstr = "-ltcl"
  else
    set libstr = "-L${incl_tcl_libdir} -ltcl"
  endif
else
  echo "Failed to find Tcl lib files."
endif

if ( $incl_tcl_inc && $incl_tcl_lib ) then
  echo "Checking Tcl linkability..."

  cat > tmp_config_tcl_test.c << %%EOF%%
#include <tcl.h>
int main() {
  Tcl_Interp* tcl_interp= Tcl_CreateInterp();
  return 0;
}
%%EOF%%

  ( cc -o tmp_config_tcl_test $cflags ${incstr} tmp_config_tcl_test.c ${libstr} -lm >& /dev/null )
  if ( ! $status ) then
    echo "Tcl libraries and includes are available."
    set incl_tcl = 1
  else
    echo "Tcl linking test failed!"
    set incl_tcl = 0
endif

else
  echo "Failed to find Tcl includes or libs; Tcl will not be supported."
  set incl_tcl = 0  
endif

if ( $incl_tcl ) then
echo "Tcl support will be included."

cat >> $ofile << %%EOF%%
# The following lines cause Tcl support to be included
CFLAGS += ${incstr}
M4FLAGS += -DINCL_TCL
LIBS += ${libstr}

%%EOF%%

else

  echo "Tcl support will *not* be included."

endif
rm tmp_config_tcl_test*

