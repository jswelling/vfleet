;P3D 2.1 
(load "p3d.lsp") 
(defun pt (xval yval zval) (make-point :x xval :y yval :z zval)) 
(defun vec (xval yval zval) (make-vector :x xval :y yval :z zval)) 
(defun clr (rval gval bval aval) 
  (make-color :r rval :g gval :b bval :a aval)) 
(defun trns (vals) (make-array '(4 4) :initial-contents vals)) 
(defun vx (xval yval zval) (make-vertex :x xval :y yval :z zval)) 
(defun vxc (xval yval zval clis) 
  (make-vertex :x xval :y yval :z zval :clr (apply 'clr clis))) 
(defun vxcn (xval yval zval clis vlis) 
  (make-vertex :x xval :y yval :z zval 
               :clr (apply 'clr clis) :normal (apply 'vec vlis))) 
(defun vxn (xval yval zval clis vlis) 
  (make-vertex :x xval :y yval :z zval :normal (apply 'vec vlis))) 
(defun vl (vlist) (do ((vls vlist (cdr vls))) ((null vls) vlist) 
                       (rplaca vls (apply 'vx (car vls))))) 
(defun vlc (vlist) (do ((vls vlist (cdr vls))) ((null vls) vlist) 
                       (rplaca vls (apply 'vxc (car vls))))) 
(defun vlcn (vlist) (do ((vls vlist (cdr vls))) ((null vls) vlist) 
                       (rplaca vls (apply 'vxcn (car vls))))) 
(defun vln (vlist) (do ((vls vlist (cdr vls))) ((null vls) vlist) 
                       (rplaca vls (apply 'vxn (car vls))))) 
(defun pm (vlist) (apply 'polymarker (vl vlist))) 
(defun pl (vlist) (apply 'polyline (vl vlist))) 
(defun pg (vlist) (apply 'polygon (vl vlist))) 
(defun bp (vlist) (apply 'bezier (vl vlist))) 
(defun tri (vlist) (apply 'triangle (vl vlist))) 
(defun pmc (vlist) (apply 'polymarker (vlc vlist))) 
(defun plc (vlist) (apply 'polyline (vlc vlist))) 
(defun pgc (vlist) (apply 'polygon (vlc vlist))) 
(defun bpc (vlist) (apply 'bezier (vlc vlist))) 
(defun tric (vlist) (apply 'triangle (vlc vlist))) 
(defun pmcn (vlist) (apply 'polymarker (vlcn vlist))) 
(defun plcn (vlist) (apply 'polyline (vlcn vlist))) 
(defun pgcn (vlist) (apply 'polygon (vlcn vlist))) 
(defun bpcn (vlist) (apply 'bezier (vlcn vlist))) 
(defun tricn (vlist) (apply 'triangle (vlcn vlist))) 
(defun pmn (vlist) (apply 'polymarker (vln vlist))) 
(defun pln (vlist) (apply 'polyline (vln vlist))) 
(defun pgn (vlist) (apply 'polygon (vln vlist))) 
(defun bpn (vlist) (apply 'bezier (vln vlist))) 
(defun trin (vlist) (apply 'triangle (vln vlist))) 
(defun msh (vcount vlist ilist) 
  (let ((varray (do ((result (make-array vcount) result) (i 0 (+ i 1)) 
                     (vls (vl vlist) (cdr vls))) ((null vls) result) 
                    (setf (aref result i) (car vls))))) 
    (mesh vlist (do ((ils ilist (cdr ils))) ((null ils) ilist) 
                    (do ((vls (car ils) (cdr vls))) ((null vls) T) 
                        (rplaca vls (aref varray (car vls)))))))) 
(defun mshc (vcount vlist ilist) 
  (let ((varray (do ((result (make-array vcount) result) (i 0 (+ i 1)) 
                     (vls (vlc vlist) (cdr vls))) ((null vls) result) 
                    (setf (aref result i) (car vls))))) 
    (mesh vlist (do ((ils ilist (cdr ils))) ((null ils) ilist) 
                    (do ((vls (car ils) (cdr vls))) ((null vls) T) 
                        (rplaca vls (aref varray (car vls)))))))) 
(defun mshcn (vcount vlist ilist) 
  (let ((varray (do ((result (make-array vcount) result) (i 0 (+ i 1)) 
                     (vls (vlcn vlist) (cdr vls))) ((null vls) result) 
                    (setf (aref result i) (car vls))))) 
    (mesh vlist (do ((ils ilist (cdr ils))) ((null ils) ilist) 
                    (do ((vls (car ils) (cdr vls))) ((null vls) T) 
                        (rplaca vls (aref varray (car vls)))))))) 
(defun mshn (vcount vlist ilist) 
  (let ((varray (do ((result (make-array vcount) result) (i 0 (+ i 1)) 
                     (vls (vln vlist) (cdr vls))) ((null vls) result) 
                    (setf (aref result i) (car vls))))) 
    (mesh vlist (do ((ils ilist (cdr ils))) ((null ils) ilist) 
                    (do ((vls (car ils) (cdr vls))) ((null vls) T) 
                        (rplaca vls (aref varray (car vls)))))))) 
(defun tx (str loc uvec vvec) 
  (text (apply 'pt loc) (apply 'vec uvec) (apply 'vec vvec) str)) 
(defun lt (loc color) (light (apply 'pt loc) (apply 'clr 
                                                    (append color '(1))))) 
(defun amb (color) (ambient (apply 'clr (append color '(1))))) 
(setq default-lights (def-gob 
                :children (list 
                (light (make-point :x 0.0 :y 1.0 :z 20.0) 
                      (make-color :r 0.8 :g 0.8 :b 0.8)) 
                (ambient (make-color :r 0.3 :g 0.3 :b 0.3)) ))) 
(setq default-camera (make-camera 
        :lookfrom (make-point :x 0.0 :y 0.0 :z 20.0) 
        :lookat origin 
        :fovea 45.0 
        :up y-vec 
        :hither -1.0 
        :yon -50.0 )) 
;END PREAMBLE 
(setq s0 (make-camera ; camera standard_camera
   :lookfrom (make-point :x 0 :y 0 :z 20)
   :lookat (make-point :x 0 :y 0 :z 0)
   :up (make-vector :x 0 :y 1 :z 0)
   :background (make-color :r 0 :g 0 :b 0 :a 1)
   :fovea 53 :hither -5 :yon -35))
(setq s1 (lt '(0 2 20) '(0.7 0.7 0.7)))
(setq s2 (amb '(0.3 0.3 0.3)))
(setq s3 (def-gob :children (list ; gob standard_lights
s2
s1
)))
(hold-gob s3)
(setq s4 (lt '(0 1 10) '(0.8 0.8 0.8)))
(setq s5 (amb '(0.3 0.3 0.3)))
(setq s6 (def-gob :children (list ; gob mylights
s5
s4
)))
(hold-gob s6)
(setq s7 (make-camera ; camera mycamera
   :lookfrom (make-point :x 0.5 :y 0.5 :z 3)
   :lookat (make-point :x 0.5 :y 0.5 :z 0.5)
   :up (make-vector :x 0 :y 1 :z 0)
   :background (make-color :r 0 :g 0 :b 0 :a 1)
   :fovea 45 :hither -1 :yon -10))
(setq s8 (msh 6 '(
(0 0 0.985714)
(0 0.0191489 1)
(0.0191489 0 1)
(0 0.0191489 0)
(0.0191489 0 0)
(0 0 0.0142857)
) '( 
( 
2
0
1
) ( 
5
4
3
) )))
(setq s9 (pl '(
(0 0 0)
(1 0 0)
(1 0 1)
(0 0 1)
(0 0 0)
)))
(setq s10 (pl '(
(0 1 0)
(1 1 0)
(1 1 1)
(0 1 1)
(0 1 0)
)))
(setq s11 (pl '(
(0 0 0)
(0 1 0)
)))
(setq s12 (pl '(
(0 0 1)
(0 1 1)
)))
(setq s13 (pl '(
(1 0 1)
(1 1 1)
)))
(setq s14 (pl '(
(1 0 0)
(1 1 0)
)))
(setq s15 (def-gob :children (list ; gob 
s14
s13
s12
s11
s10
s9
)))
(setq s16 (pl '(
(3.7 4.2 9.3)
(3.66281 4.15779 9.20653)
(3.62563 4.11558 9.11307)
(3.58844 4.07337 9.0196)
(3.55126 4.03116 8.92613)
(3.51407 3.98894 8.83266)
(3.47688 3.94673 8.7392)
(3.4397 3.90452 8.64573)
(3.40251 3.86231 8.55226)
(3.36533 3.8201 8.45879)
(3.32814 3.77789 8.36533)
(3.29095 3.73568 8.27186)
(3.25377 3.69347 8.17839)
(3.21658 3.65126 8.08492)
(3.1794 3.60905 7.99146)
(3.14221 3.56683 7.89799)
(3.10503 3.52462 7.80452)
(3.06784 3.48241 7.71106)
(3.03065 3.4402 7.61759)
(2.99347 3.39799 7.52412)
(2.95628 3.35578 7.43065)
(2.9191 3.31357 7.33719)
(2.88191 3.27136 7.24372)
(2.84472 3.22915 7.15025)
(2.80754 3.18693 7.05678)
(2.77035 3.14472 6.96332)
(2.73317 3.10251 6.86985)
(2.69598 3.0603 6.77638)
(2.65879 3.01809 6.68291)
(2.62161 2.97588 6.58945)
(2.58442 2.93367 6.49598)
(2.54724 2.89146 6.40251)
(2.51005 2.84925 6.30905)
(2.47286 2.80703 6.21558)
(2.43568 2.76482 6.12211)
(2.39849 2.72261 6.02864)
(2.36131 2.6804 5.93518)
(2.32412 2.63819 5.84171)
(2.28693 2.59598 5.74824)
(2.24975 2.55377 5.65477)
(2.21256 2.51156 5.56131)
(2.17538 2.46935 5.46784)
(2.13819 2.42714 5.37437)
(2.10101 2.38492 5.2809)
(2.06382 2.34271 5.18744)
(2.02663 2.3005 5.09397)
(1.98945 2.25829 5.0005)
(1.95226 2.21608 4.90704)
(1.91508 2.17387 4.81357)
(1.87789 2.13166 4.7201)
(1.8407 2.08945 4.62663)
(1.80352 2.04724 4.53317)
(1.76633 2.00503 4.4397)
(1.72915 1.96281 4.34623)
(1.69196 1.9206 4.25276)
(1.65477 1.87839 4.1593)
(1.61759 1.83618 4.06583)
(1.5804 1.79397 3.97236)
(1.54322 1.75176 3.87889)
(1.50603 1.70955 3.78543)
(1.46884 1.66734 3.69196)
(1.43166 1.62513 3.59849)
(1.39447 1.58291 3.50502)
(1.35729 1.5407 3.41156)
(1.3201 1.49849 3.31809)
(1.28291 1.45628 3.22462)
(1.24573 1.41407 3.13116)
(1.20854 1.37186 3.03769)
(1.17136 1.32965 2.94422)
(1.13417 1.28744 2.85075)
(1.09698 1.24523 2.75729)
(1.0598 1.20302 2.66382)
(1.02261 1.1608 2.57035)
(0.985427 1.11859 2.47688)
(0.948241 1.07638 2.38342)
(0.911055 1.03417 2.28995)
(0.873869 0.99196 2.19648)
(0.836684 0.949749 2.10301)
(0.799498 0.907538 2.00955)
(0.762312 0.865327 1.91608)
(0.725126 0.823116 1.82261)
(0.68794 0.780905 1.72915)
(0.650754 0.738693 1.63568)
(0.613568 0.696482 1.54221)
(0.576382 0.654271 1.44874)
(0.539196 0.61206 1.35528)
(0.50201 0.569849 1.26181)
(0.464824 0.527638 1.16834)
(0.427638 0.485427 1.07487)
(0.390452 0.443216 0.981407)
(0.353266 0.401005 0.887939)
(0.31608 0.358794 0.794473)
(0.278894 0.316583 0.701005)
(0.241709 0.274372 0.607537)
(0.204523 0.232161 0.514071)
(0.167337 0.18995 0.420603)
(0.130151 0.147739 0.327136)
(0.0929649 0.105528 0.233668)
(0.055779 0.0633168 0.140201)
(0.0185931 0.0211058 0.0467339)
(-0.0185928 -0.0211053 -0.0467339)
(-0.0557787 -0.0633163 -0.140202)
(-0.0929649 -0.105527 -0.233668)
(-0.130151 -0.147738 -0.327136)
(-0.167337 -0.18995 -0.420603)
(-0.204523 -0.232161 -0.514071)
(-0.241709 -0.274372 -0.607538)
(-0.278894 -0.316583 -0.701005)
(-0.31608 -0.358794 -0.794473)
(-0.353266 -0.401005 -0.887939)
(-0.390452 -0.443216 -0.981407)
(-0.427638 -0.485427 -1.07487)
(-0.464824 -0.527638 -1.16834)
(-0.50201 -0.569849 -1.26181)
(-0.539196 -0.61206 -1.35528)
(-0.576382 -0.654271 -1.44874)
(-0.613568 -0.696482 -1.54221)
(-0.650754 -0.738693 -1.63568)
(-0.68794 -0.780904 -1.72915)
(-0.725126 -0.823115 -1.82261)
(-0.762312 -0.865326 -1.91608)
(-0.799497 -0.907537 -2.00955)
(-0.836684 -0.949749 -2.10301)
(-0.873869 -0.99196 -2.19648)
(-0.911055 -1.03417 -2.28995)
(-0.948241 -1.07638 -2.38342)
(-0.985427 -1.11859 -2.47688)
(-1.02261 -1.1608 -2.57035)
(-1.0598 -1.20301 -2.66382)
(-1.09699 -1.24523 -2.75729)
(-1.13417 -1.28744 -2.85075)
(-1.17136 -1.32965 -2.94422)
(-1.20854 -1.37186 -3.03769)
(-1.24573 -1.41407 -3.13116)
(-1.28291 -1.45628 -3.22462)
(-1.3201 -1.49849 -3.31809)
(-1.35729 -1.5407 -3.41156)
(-1.39447 -1.58291 -3.50502)
(-1.43166 -1.62513 -3.59849)
(-1.46884 -1.66734 -3.69196)
(-1.50603 -1.70955 -3.78543)
(-1.54322 -1.75176 -3.87889)
(-1.5804 -1.79397 -3.97236)
(-1.61759 -1.83618 -4.06583)
(-1.65477 -1.87839 -4.1593)
(-1.69196 -1.9206 -4.25276)
(-1.72915 -1.96281 -4.34623)
(-1.76633 -2.00502 -4.4397)
(-1.80352 -2.04724 -4.53317)
(-1.8407 -2.08945 -4.62663)
(-1.87789 -2.13166 -4.7201)
(-1.91508 -2.17387 -4.81357)
(-1.95226 -2.21608 -4.90704)
(-1.98945 -2.25829 -5.0005)
(-2.02663 -2.3005 -5.09397)
(-2.06382 -2.34271 -5.18744)
(-2.101 -2.38492 -5.2809)
(-2.13819 -2.42714 -5.37437)
(-2.17538 -2.46935 -5.46784)
(-2.21256 -2.51156 -5.56131)
(-2.24975 -2.55377 -5.65477)
(-2.28693 -2.59598 -5.74824)
(-2.32412 -2.63819 -5.84171)
(-2.36131 -2.6804 -5.93518)
(-2.39849 -2.72261 -6.02864)
(-2.43568 -2.76482 -6.12211)
(-2.47286 -2.80703 -6.21558)
(-2.51005 -2.84925 -6.30905)
(-2.54724 -2.89146 -6.40251)
(-2.58442 -2.93367 -6.49598)
(-2.62161 -2.97588 -6.58945)
(-2.65879 -3.01809 -6.68291)
(-2.69598 -3.0603 -6.77638)
(-2.73317 -3.10251 -6.86985)
(-2.77035 -3.14472 -6.96332)
(-2.80754 -3.18693 -7.05678)
(-2.84472 -3.22915 -7.15025)
(-2.88191 -3.27136 -7.24372)
(-2.9191 -3.31357 -7.33719)
(-2.95628 -3.35578 -7.43065)
(-2.99347 -3.39799 -7.52412)
(-3.03065 -3.4402 -7.61759)
(-3.06784 -3.48241 -7.71105)
(-3.10503 -3.52462 -7.80452)
(-3.14221 -3.56683 -7.89799)
(-3.1794 -3.60905 -7.99146)
(-3.21658 -3.65126 -8.08493)
(-3.25377 -3.69347 -8.17839)
(-3.29095 -3.73568 -8.27186)
(-3.32814 -3.77789 -8.36533)
(-3.36533 -3.8201 -8.45879)
(-3.40251 -3.86231 -8.55226)
(-3.4397 -3.90452 -8.64573)
(-3.47688 -3.94673 -8.7392)
(-3.51407 -3.98894 -8.83266)
(-3.55126 -4.03116 -8.92613)
(-3.58844 -4.07337 -9.0196)
(-3.62563 -4.11558 -9.11307)
(-3.66281 -4.15779 -9.20653)
(-3.7 -4.2 -9.3)
)))
(setq s17 (def-gob :children (list ; gob 
s16
) :attr (list 
(cons 'color (clr 0 0 1 0))
)
))
(setq s18 (def-gob :children (list ; gob mygob
s17
s15
s8
)))
(hold-gob s18)
(snap s18 s6 s7)
(unhold-gob s3)
(free-gob s2)(setq s2 nil)
(free-gob s1)(setq s1 nil)
(free-gob s3)(setq s3 nil)
(unhold-gob s6)
(free-gob s5)(setq s5 nil)
(free-gob s4)(setq s4 nil)
(free-gob s6)(setq s6 nil)
(unhold-gob s18)
(free-gob s16)(setq s16 nil)
(free-gob s17)(setq s17 nil)
(free-gob s14)(setq s14 nil)
(free-gob s13)(setq s13 nil)
(free-gob s12)(setq s12 nil)
(free-gob s11)(setq s11 nil)
(free-gob s10)(setq s10 nil)
(free-gob s9)(setq s9 nil)
(free-gob s15)(setq s15 nil)
(free-gob s8)(setq s8 nil)
(free-gob s18)(setq s18 nil)
